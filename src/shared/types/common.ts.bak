import { ReadStream } from "fs"; 
import { Socket } from "socket.io";
import { JobInputs } from '../../job/inputs';
import { Readable } from 'stream';
import { logger } from '../../logger';


export type ServerStatus = 'busy' | 'available' 

export interface JobOptAbstract {     
    id?:string;

    cmd? : string,
    exportVar? : Record<string, string|number>    
    inputs? : inputDataSocket|string[]|JobInputs,
    jobProfile?: string;    
    modules? : string [],    
    namespace? :string,
    script? : Readable|string,    
    socket?:Socket,
    sysSettingsKey?:string,
    tagTask? : string,    
    ttl? : number
}

export function jobOptAbstractFactory(opt:Object):JobOptAbstract {

    const typeLogError = (varName:string, eType:string, varValue:any):void => {
        logger.error(`jobOpt property ${varName} of value ${varValue} is not of type ${eType}`);
    };

    const jobOptProxy:JobOptAbstract = {
        id: undefined,
        script: undefined,
        cmd: undefined,
        modules: [],
        tagTask: undefined,
        namespace: undefined,
        exportVar: undefined,
        jobProfile: "default",
        ttl: undefined,
        sysSettingsKey:undefined,
        inputs: {},
        socket: undefined  
    };
    for (const [key, value] of Object.entries(opt)) {
        if (!jobOptProxy.hasOwnProperty(key)) {
            logger.error(`${key} is not a jobOptAbstract property`);
            continue;
        }
        if( ( key == 'id' || key == 'cmd' || 'jobProfile' || 'tagTask' || 'namespace') 
            && !(value instanceof String )
            ) {
            typeLogError(key, 'string', value);
            continue;
        }
        if(key == 'exportVar') {
            if (!(typeof value === 'object')) {
                typeLogError(key, 'object', value);
                continue;
            }
            for ( const [k, v] of Object.entries(value) ) {
                if (!(typeof k === 'string')
            }
        }

        'cmd' jobProfile)
        jobOptProxy[k] = opt[k];
    }
    return jobOptProxy;
}

export interface inputDataSocket { [s: string] : ReadStream|string; }

